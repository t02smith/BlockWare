// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package library

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LibraryGameEntry is an auto generated low-level Go binding around an user-defined struct.
type LibraryGameEntry struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}

// LibraryMetaData contains all meta data concerning the Library contract.
var LibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structLibrary.GameEntry\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"getMostRecentVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"purchaseGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"internalType\":\"structLibrary.GameEntry\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"uploadGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613050806100206000396000f3fe6080604052600436106100705760003560e01c80636fa8b93f1161004e5780636fa8b93f146100f95780639d1950dd14610136578063dc164c821461015f578063f579f8821461019c57610070565b80632d139a1b146100755780633e093f79146100b257806350e0c46e146100ce575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611f7c565b6101e3565b6040516100a99190611fd7565b60405180910390f35b6100cc60048036038101906100c79190611ff2565b610b0b565b005b3480156100da57600080fd5b506100e3610e0b565b6040516100f09190612038565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b9190611ff2565b610e18565b60405161012d9190612062565b60405180910390f35b34801561014257600080fd5b5061015d600480360381019061015891906123ad565b6116d4565b005b34801561016b57600080fd5b50610186600480360381019061018191906123f6565b611b06565b6040516101939190612062565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190611ff2565b611b2a565b6040516101da9b9a999897969594939291906124b1565b60405180910390f35b6000600180600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16036102555760019050610b05565b60008060001b905060008060008681526020019081526020016000206040518061016001604052908160008201805461028d906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546102b9906125b5565b80156103065780601f106102db57610100808354040283529160200191610306565b820191906000526020600020905b8154815290600101906020018083116102e957829003601f168201915b5050505050815260200160018201805461031f906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461034b906125b5565b80156103985780601f1061036d57610100808354040283529160200191610398565b820191906000526020600020905b81548152906001019060200180831161037b57829003601f168201915b505050505081526020016002820180546103b1906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546103dd906125b5565b801561042a5780601f106103ff5761010080835404028352916020019161042a565b820191906000526020600020905b81548152906001019060200180831161040d57829003601f168201915b50505050508152602001600382018054610443906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461046f906125b5565b80156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600982018054610553906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461057f906125b5565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b50505050508152602001600a820180546105e5906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610611906125b5565b801561065e5780601f106106335761010080835404028352916020019161065e565b820191906000526020600020905b81548152906001019060200180831161064157829003601f168201915b50505050508152505090505b818160a0015114610afe576000808260a001518152602001908152602001600020604051806101600160405290816000820180546106a7906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546106d3906125b5565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b50505050508152602001600182018054610739906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610765906125b5565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b505050505081526020016002820180546107cb906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546107f7906125b5565b80156108445780601f1061081957610100808354040283529160200191610844565b820191906000526020600020905b81548152906001019060200180831161082757829003601f168201915b5050505050815260200160038201805461085d906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610889906125b5565b80156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201805461096d906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610999906125b5565b80156109e65780601f106109bb576101008083540402835291602001916109e6565b820191906000526020600020905b8154815290600101906020018083116109c957829003601f168201915b50505050508152602001600a820180546109ff906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2b906125b5565b8015610a785780601f10610a4d57610100808354040283529160200191610a78565b820191906000526020600020905b815481529060010190602001808311610a5b57829003601f168201915b505050505081525050905060018060008360800151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1603610af957600192505050610b05565b61066a565b6000925050505b92915050565b60008060008381526020019081526020016000206000018054610b2d906125b5565b905011610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6690612632565b60405180910390fd5b60006001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c099061269e565b60405180910390fd5b346000808381526020019081526020016000206007015414610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6090612730565b60405180910390fd5b60008060008084815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634600080868152602001908152602001600020600001604051610cdb91906127f3565b60006040518083038185875af1925050503d8060008114610d18576040519150601f19603f3d011682016040523d82523d6000602084013e610d1d565b606091505b509150915081610d62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5990612856565b60405180910390fd5b600180600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a833383604051610dfe939291906128cb565b60405180910390a1505050565b6000600280549050905090565b6000806000808481526020019081526020016000206000018054610e3b906125b5565b905011610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490612632565b60405180910390fd5b600080600084815260200190815260200160002060405180610160016040529081600082018054610ead906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed9906125b5565b8015610f265780601f10610efb57610100808354040283529160200191610f26565b820191906000526020600020905b815481529060010190602001808311610f0957829003601f168201915b50505050508152602001600182018054610f3f906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6b906125b5565b8015610fb85780601f10610f8d57610100808354040283529160200191610fb8565b820191906000526020600020905b815481529060010190602001808311610f9b57829003601f168201915b50505050508152602001600282018054610fd1906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffd906125b5565b801561104a5780601f1061101f5761010080835404028352916020019161104a565b820191906000526020600020905b81548152906001019060200180831161102d57829003601f168201915b50505050508152602001600382018054611063906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461108f906125b5565b80156110dc5780601f106110b1576101008083540402835291602001916110dc565b820191906000526020600020905b8154815290600101906020018083116110bf57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600982018054611173906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461119f906125b5565b80156111ec5780601f106111c1576101008083540402835291602001916111ec565b820191906000526020600020905b8154815290600101906020018083116111cf57829003601f168201915b50505050508152602001600a82018054611205906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611231906125b5565b801561127e5780601f106112535761010080835404028352916020019161127e565b820191906000526020600020905b81548152906001019060200180831161126157829003601f168201915b505050505081525050905060008060001b90505b808260c00151146116b0576000808360c001518152602001908152602001600020604051806101600160405290816000820180546112cf906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546112fb906125b5565b80156113485780601f1061131d57610100808354040283529160200191611348565b820191906000526020600020905b81548152906001019060200180831161132b57829003601f168201915b50505050508152602001600182018054611361906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461138d906125b5565b80156113da5780601f106113af576101008083540402835291602001916113da565b820191906000526020600020905b8154815290600101906020018083116113bd57829003601f168201915b505050505081526020016002820180546113f3906125b5565b80601f016020809104026020016040519081016040528092919081815260200182805461141f906125b5565b801561146c5780601f106114415761010080835404028352916020019161146c565b820191906000526020600020905b81548152906001019060200180831161144f57829003601f168201915b50505050508152602001600382018054611485906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546114b1906125b5565b80156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600982018054611595906125b5565b80601f01602080910402602001604051908101604052809291908181526020018280546115c1906125b5565b801561160e5780601f106115e35761010080835404028352916020019161160e565b820191906000526020600020905b8154815290600101906020018083116115f157829003601f168201915b50505050508152602001600a82018054611627906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611653906125b5565b80156116a05780601f10611675576101008083540402835291602001916116a0565b820191906000526020600020905b81548152906001019060200180831161168357829003601f168201915b5050505050815250509150611292565b838260800151036116c55780925050506116cf565b8160800151925050505b919050565b6000816101200151511161171d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117149061297b565b60405180910390fd5b60008161014001515111611766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175d90612a0d565b60405180910390fd5b60008060001b9050808260a001511461194f5760008060008460a001518152602001908152602001600020600001805461179f906125b5565b9050116117e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d890612a9f565b60405180910390fd5b60008060008460a00151815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461188d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188490612b31565b60405180910390fd5b818160060154146118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca90612bc3565b60405180910390fd5b8260800151816006018190555060018060008560800151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550505b3382610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816000808460800151815260200190815260200160002060008201518160000190816119b49190612d8f565b5060208201518160010190816119ca9190612d8f565b5060408201518160020190816119e09190612d8f565b5060608201518160030190816119f69190612d8f565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009019081611a7d9190612d8f565b5061014082015181600a019081611a949190612d8f565b509050506002826080015190806001815401808255809150506001900390600052602060002001600090919091909150557f87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed826080015183604051611afa929190612fea565b60405180910390a15050565b60028181548110611b1657600080fd5b906000526020600020016000915090505481565b6000602052806000526040600020600091509050806000018054611b4d906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611b79906125b5565b8015611bc65780601f10611b9b57610100808354040283529160200191611bc6565b820191906000526020600020905b815481529060010190602001808311611ba957829003601f168201915b505050505090806001018054611bdb906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c07906125b5565b8015611c545780601f10611c2957610100808354040283529160200191611c54565b820191906000526020600020905b815481529060010190602001808311611c3757829003601f168201915b505050505090806002018054611c69906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c95906125b5565b8015611ce25780601f10611cb757610100808354040283529160200191611ce2565b820191906000526020600020905b815481529060010190602001808311611cc557829003601f168201915b505050505090806003018054611cf7906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611d23906125b5565b8015611d705780601f10611d4557610100808354040283529160200191611d70565b820191906000526020600020905b815481529060010190602001808311611d5357829003601f168201915b5050505050908060040154908060050154908060060154908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806009018054611dc3906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611def906125b5565b8015611e3c5780601f10611e1157610100808354040283529160200191611e3c565b820191906000526020600020905b815481529060010190602001808311611e1f57829003601f168201915b50505050509080600a018054611e51906125b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7d906125b5565b8015611eca5780601f10611e9f57610100808354040283529160200191611eca565b820191906000526020600020905b815481529060010190602001808311611ead57829003601f168201915b505050505090508b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611efb81611ee8565b8114611f0657600080fd5b50565b600081359050611f1881611ef2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4982611f1e565b9050919050565b611f5981611f3e565b8114611f6457600080fd5b50565b600081359050611f7681611f50565b92915050565b60008060408385031215611f9357611f92611ede565b5b6000611fa185828601611f09565b9250506020611fb285828601611f67565b9150509250929050565b60008115159050919050565b611fd181611fbc565b82525050565b6000602082019050611fec6000830184611fc8565b92915050565b60006020828403121561200857612007611ede565b5b600061201684828501611f09565b91505092915050565b6000819050919050565b6120328161201f565b82525050565b600060208201905061204d6000830184612029565b92915050565b61205c81611ee8565b82525050565b60006020820190506120776000830184612053565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120cb82612082565b810181811067ffffffffffffffff821117156120ea576120e9612093565b5b80604052505050565b60006120fd611ed4565b905061210982826120c2565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561213857612137612093565b5b61214182612082565b9050602081019050919050565b82818337600083830152505050565b600061217061216b8461211d565b6120f3565b90508281526020810184848401111561218c5761218b612118565b5b61219784828561214e565b509392505050565b600082601f8301126121b4576121b3612113565b5b81356121c484826020860161215d565b91505092915050565b6121d68161201f565b81146121e157600080fd5b50565b6000813590506121f3816121cd565b92915050565b600061016082840312156122105761220f61207d565b5b61221b6101606120f3565b9050600082013567ffffffffffffffff81111561223b5761223a61210e565b5b6122478482850161219f565b600083015250602082013567ffffffffffffffff81111561226b5761226a61210e565b5b6122778482850161219f565b602083015250604082013567ffffffffffffffff81111561229b5761229a61210e565b5b6122a78482850161219f565b604083015250606082013567ffffffffffffffff8111156122cb576122ca61210e565b5b6122d78482850161219f565b60608301525060806122eb84828501611f09565b60808301525060a06122ff84828501611f09565b60a08301525060c061231384828501611f09565b60c08301525060e0612327848285016121e4565b60e08301525061010061233c84828501611f67565b6101008301525061012082013567ffffffffffffffff8111156123625761236161210e565b5b61236e8482850161219f565b6101208301525061014082013567ffffffffffffffff8111156123945761239361210e565b5b6123a08482850161219f565b6101408301525092915050565b6000602082840312156123c3576123c2611ede565b5b600082013567ffffffffffffffff8111156123e1576123e0611ee3565b5b6123ed848285016121f9565b91505092915050565b60006020828403121561240c5761240b611ede565b5b600061241a848285016121e4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561245d578082015181840152602081019050612442565b60008484015250505050565b600061247482612423565b61247e818561242e565b935061248e81856020860161243f565b61249781612082565b840191505092915050565b6124ab81611f3e565b82525050565b60006101608201905081810360008301526124cc818e612469565b905081810360208301526124e0818d612469565b905081810360408301526124f4818c612469565b90508181036060830152612508818b612469565b9050612517608083018a612053565b61252460a0830189612053565b61253160c0830188612053565b61253e60e0830187612029565b61254c6101008301866124a2565b81810361012083015261255f8185612469565b90508181036101408301526125748184612469565b90509c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125cd57607f821691505b6020821081036125e0576125df612586565b5b50919050565b7f67616d65206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600061261c600e8361242e565b9150612627826125e6565b602082019050919050565b6000602082019050818103600083015261264b8161260f565b9050919050565b7f7573657220616c7265616479206f776e732067616d6500000000000000000000600082015250565b600061268860168361242e565b915061269382612652565b602082019050919050565b600060208201905081810360008301526126b78161267b565b9050919050565b7f756e6578706563746564207072696365203d3e2076616c75652073686f756c6460008201527f20657175616c207468652067616d652773207072696363650000000000000000602082015250565b600061271a60388361242e565b9150612725826126be565b604082019050919050565b600060208201905081810360008301526127498161270d565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461277d816125b5565b6127878186612750565b945060018216600081146127a257600181146127b7576127ea565b60ff19831686528115158202860193506127ea565b6127c08561275b565b60005b838110156127e2578154818901526001820191506020810190506127c3565b838801955050505b50505092915050565b60006127ff8284612770565b915081905092915050565b7f4661696c656420746f207472616e736665722045746865720000000000000000600082015250565b600061284060188361242e565b915061284b8261280a565b602082019050919050565b6000602082019050818103600083015261286f81612833565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061289d82612876565b6128a78185612881565b93506128b781856020860161243f565b6128c081612082565b840191505092915050565b60006060820190506128e06000830186612053565b6128ed60208301856124a2565b81810360408301526128ff8184612892565b9050949350505050565b7f6e6f2049504653206164647265737320676976656e20666f722068617368207460008201527f7265656500000000000000000000000000000000000000000000000000000000602082015250565b600061296560248361242e565b915061297082612909565b604082019050919050565b6000602082019050818103600083015261299481612958565b9050919050565b7f6e6f2049504653206164647265737320676976656e20666f722074686520617360008201527f7365747320000000000000000000000000000000000000000000000000000000602082015250565b60006129f760258361242e565b9150612a028261299b565b604082019050919050565b60006020820190508181036000830152612a26816129ea565b9050919050565b7f70726576696f75732076657273696f6e206f662067616d65206e6f7420666f7560008201527f6e64000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a8960228361242e565b9150612a9482612a2d565b604082019050919050565b60006020820190508181036000830152612ab881612a7c565b9050919050565b7f6f6e6c7920746865206f726967696e616c2075706c6f616465722063616e207560008201527f70646174652074686569722067616d6500000000000000000000000000000000602082015250565b6000612b1b60308361242e565b9150612b2682612abf565b604082019050919050565b60006020820190508181036000830152612b4a81612b0e565b9050919050565b7f616e207570646174652068617320616c7265616479206265656e2072656c656160008201527f73656420666f7220746869732067616d65000000000000000000000000000000602082015250565b6000612bad60318361242e565b9150612bb882612b51565b604082019050919050565b60006020820190508181036000830152612bdc81612ba0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c08565b612c4f8683612c08565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c8c612c87612c828461201f565b612c67565b61201f565b9050919050565b6000819050919050565b612ca683612c71565b612cba612cb282612c93565b848454612c15565b825550505050565b600090565b612ccf612cc2565b612cda818484612c9d565b505050565b5b81811015612cfe57612cf3600082612cc7565b600181019050612ce0565b5050565b601f821115612d4357612d1481612be3565b612d1d84612bf8565b81016020851015612d2c578190505b612d40612d3885612bf8565b830182612cdf565b50505b505050565b600082821c905092915050565b6000612d6660001984600802612d48565b1980831691505092915050565b6000612d7f8383612d55565b9150826002028217905092915050565b612d9882612423565b67ffffffffffffffff811115612db157612db0612093565b5b612dbb82546125b5565b612dc6828285612d02565b600060209050601f831160018114612df95760008415612de7578287015190505b612df18582612d73565b865550612e59565b601f198416612e0786612be3565b60005b82811015612e2f57848901518255600182019150602085019450602081019050612e0a565b86831015612e4c5784890151612e48601f891682612d55565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000612e7d82612423565b612e878185612e61565b9350612e9781856020860161243f565b612ea081612082565b840191505092915050565b612eb481611ee8565b82525050565b612ec38161201f565b82525050565b612ed281611f3e565b82525050565b6000610160830160008301518482036000860152612ef68282612e72565b91505060208301518482036020860152612f108282612e72565b91505060408301518482036040860152612f2a8282612e72565b91505060608301518482036060860152612f448282612e72565b9150506080830151612f596080860182612eab565b5060a0830151612f6c60a0860182612eab565b5060c0830151612f7f60c0860182612eab565b5060e0830151612f9260e0860182612eba565b50610100830151612fa7610100860182612ec9565b50610120830151848203610120860152612fc18282612e72565b915050610140830151848203610140860152612fdd8282612e72565b9150508091505092915050565b6000604082019050612fff6000830185612053565b81810360208301526130118184612ed8565b9050939250505056fea264697066735822122046069d392c2363a3cbd14d306d80494face2cf08945340c47dab460da8186fb964736f6c63430008120033",
}

// LibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use LibraryMetaData.ABI instead.
var LibraryABI = LibraryMetaData.ABI

// LibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibraryMetaData.Bin instead.
var LibraryBin = LibraryMetaData.Bin

// DeployLibrary deploys a new Ethereum contract, binding an instance of Library to it.
func DeployLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Library, error) {
	parsed, err := LibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Library{LibraryCaller: LibraryCaller{contract: contract}, LibraryTransactor: LibraryTransactor{contract: contract}, LibraryFilterer: LibraryFilterer{contract: contract}}, nil
}

// Library is an auto generated Go binding around an Ethereum contract.
type Library struct {
	LibraryCaller     // Read-only binding to the contract
	LibraryTransactor // Write-only binding to the contract
	LibraryFilterer   // Log filterer for contract events
}

// LibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibrarySession struct {
	Contract     *Library          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibraryCallerSession struct {
	Contract *LibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// LibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibraryTransactorSession struct {
	Contract     *LibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibraryRaw struct {
	Contract *Library // Generic contract binding to access the raw methods on
}

// LibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibraryCallerRaw struct {
	Contract *LibraryCaller // Generic read-only contract binding to access the raw methods on
}

// LibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibraryTransactorRaw struct {
	Contract *LibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibrary creates a new instance of Library, bound to a specific deployed contract.
func NewLibrary(address common.Address, backend bind.ContractBackend) (*Library, error) {
	contract, err := bindLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Library{LibraryCaller: LibraryCaller{contract: contract}, LibraryTransactor: LibraryTransactor{contract: contract}, LibraryFilterer: LibraryFilterer{contract: contract}}, nil
}

// NewLibraryCaller creates a new read-only instance of Library, bound to a specific deployed contract.
func NewLibraryCaller(address common.Address, caller bind.ContractCaller) (*LibraryCaller, error) {
	contract, err := bindLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibraryCaller{contract: contract}, nil
}

// NewLibraryTransactor creates a new write-only instance of Library, bound to a specific deployed contract.
func NewLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*LibraryTransactor, error) {
	contract, err := bindLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibraryTransactor{contract: contract}, nil
}

// NewLibraryFilterer creates a new log filterer instance of Library, bound to a specific deployed contract.
func NewLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*LibraryFilterer, error) {
	contract, err := bindLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibraryFilterer{contract: contract}, nil
}

// bindLibrary binds a generic wrapper to an already deployed contract.
func bindLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Library *LibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Library.Contract.LibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Library *LibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Library.Contract.LibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Library *LibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Library.Contract.LibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Library *LibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Library.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Library *LibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Library.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Library *LibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Library.Contract.contract.Transact(opts, method, params...)
}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibraryCaller) GameHashes(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "gameHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibrarySession) GameHashes(arg0 *big.Int) ([32]byte, error) {
	return _Library.Contract.GameHashes(&_Library.CallOpts, arg0)
}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibraryCallerSession) GameHashes(arg0 *big.Int) ([32]byte, error) {
	return _Library.Contract.GameHashes(&_Library.CallOpts, arg0)
}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibraryCaller) Games(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "games", arg0)

	outstruct := new(struct {
		Title               string
		Version             string
		ReleaseDate         string
		Developer           string
		RootHash            [32]byte
		PreviousVersion     [32]byte
		NextVersion         [32]byte
		Price               *big.Int
		Uploader            common.Address
		HashTreeIPFSAddress string
		AssetsIPFSAddress   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.ReleaseDate = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Developer = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.RootHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.PreviousVersion = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.NextVersion = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)
	outstruct.Price = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.Uploader = *abi.ConvertType(out[8], new(common.Address)).(*common.Address)
	outstruct.HashTreeIPFSAddress = *abi.ConvertType(out[9], new(string)).(*string)
	outstruct.AssetsIPFSAddress = *abi.ConvertType(out[10], new(string)).(*string)

	return *outstruct, err

}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibrarySession) Games(arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	return _Library.Contract.Games(&_Library.CallOpts, arg0)
}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibraryCallerSession) Games(arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	return _Library.Contract.Games(&_Library.CallOpts, arg0)
}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibraryCaller) GetMostRecentVersion(opts *bind.CallOpts, _game [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "getMostRecentVersion", _game)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibrarySession) GetMostRecentVersion(_game [32]byte) ([32]byte, error) {
	return _Library.Contract.GetMostRecentVersion(&_Library.CallOpts, _game)
}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibraryCallerSession) GetMostRecentVersion(_game [32]byte) ([32]byte, error) {
	return _Library.Contract.GetMostRecentVersion(&_Library.CallOpts, _game)
}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibraryCaller) HasPurchased(opts *bind.CallOpts, _game [32]byte, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "hasPurchased", _game, _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibrarySession) HasPurchased(_game [32]byte, _addr common.Address) (bool, error) {
	return _Library.Contract.HasPurchased(&_Library.CallOpts, _game, _addr)
}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibraryCallerSession) HasPurchased(_game [32]byte, _addr common.Address) (bool, error) {
	return _Library.Contract.HasPurchased(&_Library.CallOpts, _game, _addr)
}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibraryCaller) LibSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "libSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibrarySession) LibSize() (*big.Int, error) {
	return _Library.Contract.LibSize(&_Library.CallOpts)
}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibraryCallerSession) LibSize() (*big.Int, error) {
	return _Library.Contract.LibSize(&_Library.CallOpts)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibraryTransactor) PurchaseGame(opts *bind.TransactOpts, _game [32]byte) (*types.Transaction, error) {
	return _Library.contract.Transact(opts, "purchaseGame", _game)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibrarySession) PurchaseGame(_game [32]byte) (*types.Transaction, error) {
	return _Library.Contract.PurchaseGame(&_Library.TransactOpts, _game)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibraryTransactorSession) PurchaseGame(_game [32]byte) (*types.Transaction, error) {
	return _Library.Contract.PurchaseGame(&_Library.TransactOpts, _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibraryTransactor) UploadGame(opts *bind.TransactOpts, _game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.contract.Transact(opts, "uploadGame", _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibrarySession) UploadGame(_game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.Contract.UploadGame(&_Library.TransactOpts, _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibraryTransactorSession) UploadGame(_game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.Contract.UploadGame(&_Library.TransactOpts, _game)
}

// LibraryNewGameIterator is returned from FilterNewGame and is used to iterate over the raw logs and unpacked data for NewGame events raised by the Library contract.
type LibraryNewGameIterator struct {
	Event *LibraryNewGame // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibraryNewGameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibraryNewGame)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibraryNewGame)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibraryNewGameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibraryNewGameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibraryNewGame represents a NewGame event raised by the Library contract.
type LibraryNewGame struct {
	Hash [32]byte
	Game LibraryGameEntry
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNewGame is a free log retrieval operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) FilterNewGame(opts *bind.FilterOpts) (*LibraryNewGameIterator, error) {

	logs, sub, err := _Library.contract.FilterLogs(opts, "NewGame")
	if err != nil {
		return nil, err
	}
	return &LibraryNewGameIterator{contract: _Library.contract, event: "NewGame", logs: logs, sub: sub}, nil
}

// WatchNewGame is a free log subscription operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) WatchNewGame(opts *bind.WatchOpts, sink chan<- *LibraryNewGame) (event.Subscription, error) {

	logs, sub, err := _Library.contract.WatchLogs(opts, "NewGame")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibraryNewGame)
				if err := _Library.contract.UnpackLog(event, "NewGame", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewGame is a log parse operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) ParseNewGame(log types.Log) (*LibraryNewGame, error) {
	event := new(LibraryNewGame)
	if err := _Library.contract.UnpackLog(event, "NewGame", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LibraryPurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the Library contract.
type LibraryPurchaseIterator struct {
	Event *LibraryPurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibraryPurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibraryPurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibraryPurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibraryPurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibraryPurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibraryPurchase represents a Purchase event raised by the Library contract.
type LibraryPurchase struct {
	Hash  [32]byte
	Buyer common.Address
	Data  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) FilterPurchase(opts *bind.FilterOpts) (*LibraryPurchaseIterator, error) {

	logs, sub, err := _Library.contract.FilterLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return &LibraryPurchaseIterator{contract: _Library.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *LibraryPurchase) (event.Subscription, error) {

	logs, sub, err := _Library.contract.WatchLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibraryPurchase)
				if err := _Library.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) ParsePurchase(log types.Log) (*LibraryPurchase, error) {
	event := new(LibraryPurchase)
	if err := _Library.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
