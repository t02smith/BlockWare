// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package library

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LibraryGameEntry is an auto generated low-level Go binding around an user-defined struct.
type LibraryGameEntry struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}

// LibraryMetaData contains all meta data concerning the Library contract.
var LibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structLibrary.GameEntry\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"getMostRecentVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"purchaseGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"internalType\":\"structLibrary.GameEntry\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"uploadGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612b70806100206000396000f3fe6080604052600436106100705760003560e01c80636fa8b93f1161004e5780636fa8b93f146100f95780639d1950dd14610136578063dc164c821461015f578063f579f8821461019c57610070565b80632d139a1b146100755780633e093f79146100b257806350e0c46e146100ce575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611a9c565b6101e3565b6040516100a99190611af7565b60405180910390f35b6100cc60048036038101906100c79190611b12565b610250565b005b3480156100da57600080fd5b506100e3610550565b6040516100f09190611b58565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b9190611b12565b61055d565b60405161012d9190611b82565b60405180910390f35b34801561014257600080fd5b5061015d60048036038101906101589190611ecd565b610e19565b005b34801561016b57600080fd5b5061018660048036038101906101819190611f16565b611626565b6040516101939190611b82565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190611b12565b61164a565b6040516101da9b9a99989796959493929190611fd1565b60405180910390f35b6000600180600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614905092915050565b60008060008381526020019081526020016000206000018054610272906120d5565b9050116102b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ab90612152565b60405180910390fd5b60006001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e906121be565b60405180910390fd5b3460008083815260200190815260200160002060070154146103ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a590612250565b60405180910390fd5b60008060008084815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346000808681526020019081526020016000206000016040516104209190612313565b60006040518083038185875af1925050503d806000811461045d576040519150601f19603f3d011682016040523d82523d6000602084013e610462565b606091505b5091509150816104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90612376565b60405180910390fd5b600180600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a833383604051610543939291906123eb565b60405180910390a1505050565b6000600280549050905090565b6000806000808481526020019081526020016000206000018054610580906120d5565b9050116105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b990612152565b60405180910390fd5b6000806000848152602001908152602001600020604051806101600160405290816000820180546105f2906120d5565b80601f016020809104026020016040519081016040528092919081815260200182805461061e906120d5565b801561066b5780601f106106405761010080835404028352916020019161066b565b820191906000526020600020905b81548152906001019060200180831161064e57829003601f168201915b50505050508152602001600182018054610684906120d5565b80601f01602080910402602001604051908101604052809291908181526020018280546106b0906120d5565b80156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b50505050508152602001600282018054610716906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610742906120d5565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b505050505081526020016003820180546107a8906120d5565b80601f01602080910402602001604051908101604052809291908181526020018280546107d4906120d5565b80156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820180546108b8906120d5565b80601f01602080910402602001604051908101604052809291908181526020018280546108e4906120d5565b80156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b50505050508152602001600a8201805461094a906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610976906120d5565b80156109c35780601f10610998576101008083540402835291602001916109c3565b820191906000526020600020905b8154815290600101906020018083116109a657829003601f168201915b505050505081525050905060008060001b90505b808260c0015114610df5576000808360c00151815260200190815260200160002060405180610160016040529081600082018054610a14906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a40906120d5565b8015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b50505050508152602001600182018054610aa6906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad2906120d5565b8015610b1f5780601f10610af457610100808354040283529160200191610b1f565b820191906000526020600020905b815481529060010190602001808311610b0257829003601f168201915b50505050508152602001600282018054610b38906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b64906120d5565b8015610bb15780601f10610b8657610100808354040283529160200191610bb1565b820191906000526020600020905b815481529060010190602001808311610b9457829003601f168201915b50505050508152602001600382018054610bca906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf6906120d5565b8015610c435780601f10610c1857610100808354040283529160200191610c43565b820191906000526020600020905b815481529060010190602001808311610c2657829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600982018054610cda906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d06906120d5565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b50505050508152602001600a82018054610d6c906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d98906120d5565b8015610de55780601f10610dba57610100808354040283529160200191610de5565b820191906000526020600020905b815481529060010190602001808311610dc857829003601f168201915b50505050508152505091506109d7565b83826080015103610e0a578092505050610e14565b8160c00151925050505b919050565b60008161012001515111610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e599061249b565b60405180910390fd5b60008161014001515111610eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea29061252d565b60405180910390fd5b6000801b8160a00151146114705760008060008360a0015181526020019081526020016000206000018054610edf906120d5565b905011610f21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f18906125bf565b60405180910390fd5b60008060008360a00151815260200190815260200160002060405180610160016040529081600082018054610f55906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f81906120d5565b8015610fce5780601f10610fa357610100808354040283529160200191610fce565b820191906000526020600020905b815481529060010190602001808311610fb157829003601f168201915b50505050508152602001600182018054610fe7906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611013906120d5565b80156110605780601f1061103557610100808354040283529160200191611060565b820191906000526020600020905b81548152906001019060200180831161104357829003601f168201915b50505050508152602001600282018054611079906120d5565b80601f01602080910402602001604051908101604052809291908181526020018280546110a5906120d5565b80156110f25780601f106110c7576101008083540402835291602001916110f2565b820191906000526020600020905b8154815290600101906020018083116110d557829003601f168201915b5050505050815260200160038201805461110b906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611137906120d5565b80156111845780601f1061115957610100808354040283529160200191611184565b820191906000526020600020905b81548152906001019060200180831161116757829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201805461121b906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611247906120d5565b80156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b50505050508152602001600a820180546112ad906120d5565b80601f01602080910402602001604051908101604052809291908181526020018280546112d9906120d5565b80156113265780601f106112fb57610100808354040283529160200191611326565b820191906000526020600020905b81548152906001019060200180831161130957829003601f168201915b50505050508152505090503373ffffffffffffffffffffffffffffffffffffffff1681610100015173ffffffffffffffffffffffffffffffffffffffff16146113a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139b90612651565b60405180910390fd5b60008060001b9050808260c00151146113f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e9906126e3565b60405180910390fd5b82608001518260c001818152505060018060008560800151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555050505b3381610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806000808360800151815260200190815260200160002060008201518160000190816114d591906128af565b5060208201518160010190816114eb91906128af565b50604082015181600201908161150191906128af565b50606082015181600301908161151791906128af565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061012082015181600901908161159e91906128af565b5061014082015181600a0190816115b591906128af565b509050506002816080015190806001815401808255809150506001900390600052602060002001600090919091909150557f87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed81608001518260405161161b929190612b0a565b60405180910390a150565b6002818154811061163657600080fd5b906000526020600020016000915090505481565b600060205280600052604060002060009150905080600001805461166d906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611699906120d5565b80156116e65780601f106116bb576101008083540402835291602001916116e6565b820191906000526020600020905b8154815290600101906020018083116116c957829003601f168201915b5050505050908060010180546116fb906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611727906120d5565b80156117745780601f1061174957610100808354040283529160200191611774565b820191906000526020600020905b81548152906001019060200180831161175757829003601f168201915b505050505090806002018054611789906120d5565b80601f01602080910402602001604051908101604052809291908181526020018280546117b5906120d5565b80156118025780601f106117d757610100808354040283529160200191611802565b820191906000526020600020905b8154815290600101906020018083116117e557829003601f168201915b505050505090806003018054611817906120d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611843906120d5565b80156118905780601f1061186557610100808354040283529160200191611890565b820191906000526020600020905b81548152906001019060200180831161187357829003601f168201915b5050505050908060040154908060050154908060060154908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060090180546118e3906120d5565b80601f016020809104026020016040519081016040528092919081815260200182805461190f906120d5565b801561195c5780601f106119315761010080835404028352916020019161195c565b820191906000526020600020905b81548152906001019060200180831161193f57829003601f168201915b50505050509080600a018054611971906120d5565b80601f016020809104026020016040519081016040528092919081815260200182805461199d906120d5565b80156119ea5780601f106119bf576101008083540402835291602001916119ea565b820191906000526020600020905b8154815290600101906020018083116119cd57829003601f168201915b505050505090508b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611a1b81611a08565b8114611a2657600080fd5b50565b600081359050611a3881611a12565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a6982611a3e565b9050919050565b611a7981611a5e565b8114611a8457600080fd5b50565b600081359050611a9681611a70565b92915050565b60008060408385031215611ab357611ab26119fe565b5b6000611ac185828601611a29565b9250506020611ad285828601611a87565b9150509250929050565b60008115159050919050565b611af181611adc565b82525050565b6000602082019050611b0c6000830184611ae8565b92915050565b600060208284031215611b2857611b276119fe565b5b6000611b3684828501611a29565b91505092915050565b6000819050919050565b611b5281611b3f565b82525050565b6000602082019050611b6d6000830184611b49565b92915050565b611b7c81611a08565b82525050565b6000602082019050611b976000830184611b73565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611beb82611ba2565b810181811067ffffffffffffffff82111715611c0a57611c09611bb3565b5b80604052505050565b6000611c1d6119f4565b9050611c298282611be2565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611c5857611c57611bb3565b5b611c6182611ba2565b9050602081019050919050565b82818337600083830152505050565b6000611c90611c8b84611c3d565b611c13565b905082815260208101848484011115611cac57611cab611c38565b5b611cb7848285611c6e565b509392505050565b600082601f830112611cd457611cd3611c33565b5b8135611ce4848260208601611c7d565b91505092915050565b611cf681611b3f565b8114611d0157600080fd5b50565b600081359050611d1381611ced565b92915050565b60006101608284031215611d3057611d2f611b9d565b5b611d3b610160611c13565b9050600082013567ffffffffffffffff811115611d5b57611d5a611c2e565b5b611d6784828501611cbf565b600083015250602082013567ffffffffffffffff811115611d8b57611d8a611c2e565b5b611d9784828501611cbf565b602083015250604082013567ffffffffffffffff811115611dbb57611dba611c2e565b5b611dc784828501611cbf565b604083015250606082013567ffffffffffffffff811115611deb57611dea611c2e565b5b611df784828501611cbf565b6060830152506080611e0b84828501611a29565b60808301525060a0611e1f84828501611a29565b60a08301525060c0611e3384828501611a29565b60c08301525060e0611e4784828501611d04565b60e083015250610100611e5c84828501611a87565b6101008301525061012082013567ffffffffffffffff811115611e8257611e81611c2e565b5b611e8e84828501611cbf565b6101208301525061014082013567ffffffffffffffff811115611eb457611eb3611c2e565b5b611ec084828501611cbf565b6101408301525092915050565b600060208284031215611ee357611ee26119fe565b5b600082013567ffffffffffffffff811115611f0157611f00611a03565b5b611f0d84828501611d19565b91505092915050565b600060208284031215611f2c57611f2b6119fe565b5b6000611f3a84828501611d04565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f7d578082015181840152602081019050611f62565b60008484015250505050565b6000611f9482611f43565b611f9e8185611f4e565b9350611fae818560208601611f5f565b611fb781611ba2565b840191505092915050565b611fcb81611a5e565b82525050565b6000610160820190508181036000830152611fec818e611f89565b90508181036020830152612000818d611f89565b90508181036040830152612014818c611f89565b90508181036060830152612028818b611f89565b9050612037608083018a611b73565b61204460a0830189611b73565b61205160c0830188611b73565b61205e60e0830187611b49565b61206c610100830186611fc2565b81810361012083015261207f8185611f89565b90508181036101408301526120948184611f89565b90509c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806120ed57607f821691505b602082108103612100576120ff6120a6565b5b50919050565b7f67616d65206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600061213c600e83611f4e565b915061214782612106565b602082019050919050565b6000602082019050818103600083015261216b8161212f565b9050919050565b7f7573657220616c7265616479206f776e732067616d6500000000000000000000600082015250565b60006121a8601683611f4e565b91506121b382612172565b602082019050919050565b600060208201905081810360008301526121d78161219b565b9050919050565b7f756e6578706563746564207072696365203d3e2076616c75652073686f756c6460008201527f20657175616c207468652067616d652773207072696363650000000000000000602082015250565b600061223a603883611f4e565b9150612245826121de565b604082019050919050565b600060208201905081810360008301526122698161222d565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461229d816120d5565b6122a78186612270565b945060018216600081146122c257600181146122d75761230a565b60ff198316865281151582028601935061230a565b6122e08561227b565b60005b83811015612302578154818901526001820191506020810190506122e3565b838801955050505b50505092915050565b600061231f8284612290565b915081905092915050565b7f4661696c656420746f207472616e736665722045746865720000000000000000600082015250565b6000612360601883611f4e565b915061236b8261232a565b602082019050919050565b6000602082019050818103600083015261238f81612353565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006123bd82612396565b6123c781856123a1565b93506123d7818560208601611f5f565b6123e081611ba2565b840191505092915050565b60006060820190506124006000830186611b73565b61240d6020830185611fc2565b818103604083015261241f81846123b2565b9050949350505050565b7f6e6f2049504653206164647265737320676976656e20666f722068617368207460008201527f7265656500000000000000000000000000000000000000000000000000000000602082015250565b6000612485602483611f4e565b915061249082612429565b604082019050919050565b600060208201905081810360008301526124b481612478565b9050919050565b7f6e6f2049504653206164647265737320676976656e20666f722074686520617360008201527f7365747320000000000000000000000000000000000000000000000000000000602082015250565b6000612517602583611f4e565b9150612522826124bb565b604082019050919050565b600060208201905081810360008301526125468161250a565b9050919050565b7f70726576696f75732076657273696f6e206f662067616d65206e6f7420666f7560008201527f6e64000000000000000000000000000000000000000000000000000000000000602082015250565b60006125a9602283611f4e565b91506125b48261254d565b604082019050919050565b600060208201905081810360008301526125d88161259c565b9050919050565b7f6f6e6c7920746865206f726967696e616c2075706c6f616465722063616e207560008201527f70646174652074686569722067616d6500000000000000000000000000000000602082015250565b600061263b603083611f4e565b9150612646826125df565b604082019050919050565b6000602082019050818103600083015261266a8161262e565b9050919050565b7f616e207570646174652068617320616c7265616479206265656e2072656c656160008201527f73656420666f7220746869732067616d65000000000000000000000000000000602082015250565b60006126cd603183611f4e565b91506126d882612671565b604082019050919050565b600060208201905081810360008301526126fc816126c0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612728565b61276f8683612728565b95508019841693508086168417925050509392505050565b6000819050919050565b60006127ac6127a76127a284611b3f565b612787565b611b3f565b9050919050565b6000819050919050565b6127c683612791565b6127da6127d2826127b3565b848454612735565b825550505050565b600090565b6127ef6127e2565b6127fa8184846127bd565b505050565b5b8181101561281e576128136000826127e7565b600181019050612800565b5050565b601f8211156128635761283481612703565b61283d84612718565b8101602085101561284c578190505b61286061285885612718565b8301826127ff565b50505b505050565b600082821c905092915050565b600061288660001984600802612868565b1980831691505092915050565b600061289f8383612875565b9150826002028217905092915050565b6128b882611f43565b67ffffffffffffffff8111156128d1576128d0611bb3565b5b6128db82546120d5565b6128e6828285612822565b600060209050601f8311600181146129195760008415612907578287015190505b6129118582612893565b865550612979565b601f19841661292786612703565b60005b8281101561294f5784890151825560018201915060208501945060208101905061292a565b8683101561296c5784890151612968601f891682612875565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b600061299d82611f43565b6129a78185612981565b93506129b7818560208601611f5f565b6129c081611ba2565b840191505092915050565b6129d481611a08565b82525050565b6129e381611b3f565b82525050565b6129f281611a5e565b82525050565b6000610160830160008301518482036000860152612a168282612992565b91505060208301518482036020860152612a308282612992565b91505060408301518482036040860152612a4a8282612992565b91505060608301518482036060860152612a648282612992565b9150506080830151612a7960808601826129cb565b5060a0830151612a8c60a08601826129cb565b5060c0830151612a9f60c08601826129cb565b5060e0830151612ab260e08601826129da565b50610100830151612ac76101008601826129e9565b50610120830151848203610120860152612ae18282612992565b915050610140830151848203610140860152612afd8282612992565b9150508091505092915050565b6000604082019050612b1f6000830185611b73565b8181036020830152612b3181846129f8565b9050939250505056fea2646970667358221220b0c0966a60b5fba826b82221f7c1fa7feed60ff9865e7a1a166665ecf81fa78e64736f6c63430008120033",
}

// LibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use LibraryMetaData.ABI instead.
var LibraryABI = LibraryMetaData.ABI

// LibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibraryMetaData.Bin instead.
var LibraryBin = LibraryMetaData.Bin

// DeployLibrary deploys a new Ethereum contract, binding an instance of Library to it.
func DeployLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Library, error) {
	parsed, err := LibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Library{LibraryCaller: LibraryCaller{contract: contract}, LibraryTransactor: LibraryTransactor{contract: contract}, LibraryFilterer: LibraryFilterer{contract: contract}}, nil
}

// Library is an auto generated Go binding around an Ethereum contract.
type Library struct {
	LibraryCaller     // Read-only binding to the contract
	LibraryTransactor // Write-only binding to the contract
	LibraryFilterer   // Log filterer for contract events
}

// LibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibrarySession struct {
	Contract     *Library          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibraryCallerSession struct {
	Contract *LibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// LibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibraryTransactorSession struct {
	Contract     *LibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibraryRaw struct {
	Contract *Library // Generic contract binding to access the raw methods on
}

// LibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibraryCallerRaw struct {
	Contract *LibraryCaller // Generic read-only contract binding to access the raw methods on
}

// LibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibraryTransactorRaw struct {
	Contract *LibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibrary creates a new instance of Library, bound to a specific deployed contract.
func NewLibrary(address common.Address, backend bind.ContractBackend) (*Library, error) {
	contract, err := bindLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Library{LibraryCaller: LibraryCaller{contract: contract}, LibraryTransactor: LibraryTransactor{contract: contract}, LibraryFilterer: LibraryFilterer{contract: contract}}, nil
}

// NewLibraryCaller creates a new read-only instance of Library, bound to a specific deployed contract.
func NewLibraryCaller(address common.Address, caller bind.ContractCaller) (*LibraryCaller, error) {
	contract, err := bindLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibraryCaller{contract: contract}, nil
}

// NewLibraryTransactor creates a new write-only instance of Library, bound to a specific deployed contract.
func NewLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*LibraryTransactor, error) {
	contract, err := bindLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibraryTransactor{contract: contract}, nil
}

// NewLibraryFilterer creates a new log filterer instance of Library, bound to a specific deployed contract.
func NewLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*LibraryFilterer, error) {
	contract, err := bindLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibraryFilterer{contract: contract}, nil
}

// bindLibrary binds a generic wrapper to an already deployed contract.
func bindLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Library *LibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Library.Contract.LibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Library *LibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Library.Contract.LibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Library *LibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Library.Contract.LibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Library *LibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Library.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Library *LibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Library.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Library *LibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Library.Contract.contract.Transact(opts, method, params...)
}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibraryCaller) GameHashes(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "gameHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibrarySession) GameHashes(arg0 *big.Int) ([32]byte, error) {
	return _Library.Contract.GameHashes(&_Library.CallOpts, arg0)
}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibraryCallerSession) GameHashes(arg0 *big.Int) ([32]byte, error) {
	return _Library.Contract.GameHashes(&_Library.CallOpts, arg0)
}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibraryCaller) Games(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "games", arg0)

	outstruct := new(struct {
		Title               string
		Version             string
		ReleaseDate         string
		Developer           string
		RootHash            [32]byte
		PreviousVersion     [32]byte
		NextVersion         [32]byte
		Price               *big.Int
		Uploader            common.Address
		HashTreeIPFSAddress string
		AssetsIPFSAddress   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.ReleaseDate = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Developer = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.RootHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.PreviousVersion = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.NextVersion = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)
	outstruct.Price = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.Uploader = *abi.ConvertType(out[8], new(common.Address)).(*common.Address)
	outstruct.HashTreeIPFSAddress = *abi.ConvertType(out[9], new(string)).(*string)
	outstruct.AssetsIPFSAddress = *abi.ConvertType(out[10], new(string)).(*string)

	return *outstruct, err

}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibrarySession) Games(arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	return _Library.Contract.Games(&_Library.CallOpts, arg0)
}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibraryCallerSession) Games(arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	return _Library.Contract.Games(&_Library.CallOpts, arg0)
}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibraryCaller) GetMostRecentVersion(opts *bind.CallOpts, _game [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "getMostRecentVersion", _game)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibrarySession) GetMostRecentVersion(_game [32]byte) ([32]byte, error) {
	return _Library.Contract.GetMostRecentVersion(&_Library.CallOpts, _game)
}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibraryCallerSession) GetMostRecentVersion(_game [32]byte) ([32]byte, error) {
	return _Library.Contract.GetMostRecentVersion(&_Library.CallOpts, _game)
}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibraryCaller) HasPurchased(opts *bind.CallOpts, _game [32]byte, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "hasPurchased", _game, _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibrarySession) HasPurchased(_game [32]byte, _addr common.Address) (bool, error) {
	return _Library.Contract.HasPurchased(&_Library.CallOpts, _game, _addr)
}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibraryCallerSession) HasPurchased(_game [32]byte, _addr common.Address) (bool, error) {
	return _Library.Contract.HasPurchased(&_Library.CallOpts, _game, _addr)
}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibraryCaller) LibSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "libSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibrarySession) LibSize() (*big.Int, error) {
	return _Library.Contract.LibSize(&_Library.CallOpts)
}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibraryCallerSession) LibSize() (*big.Int, error) {
	return _Library.Contract.LibSize(&_Library.CallOpts)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibraryTransactor) PurchaseGame(opts *bind.TransactOpts, _game [32]byte) (*types.Transaction, error) {
	return _Library.contract.Transact(opts, "purchaseGame", _game)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibrarySession) PurchaseGame(_game [32]byte) (*types.Transaction, error) {
	return _Library.Contract.PurchaseGame(&_Library.TransactOpts, _game)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibraryTransactorSession) PurchaseGame(_game [32]byte) (*types.Transaction, error) {
	return _Library.Contract.PurchaseGame(&_Library.TransactOpts, _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibraryTransactor) UploadGame(opts *bind.TransactOpts, _game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.contract.Transact(opts, "uploadGame", _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibrarySession) UploadGame(_game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.Contract.UploadGame(&_Library.TransactOpts, _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibraryTransactorSession) UploadGame(_game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.Contract.UploadGame(&_Library.TransactOpts, _game)
}

// LibraryNewGameIterator is returned from FilterNewGame and is used to iterate over the raw logs and unpacked data for NewGame events raised by the Library contract.
type LibraryNewGameIterator struct {
	Event *LibraryNewGame // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibraryNewGameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibraryNewGame)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibraryNewGame)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibraryNewGameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibraryNewGameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibraryNewGame represents a NewGame event raised by the Library contract.
type LibraryNewGame struct {
	Hash [32]byte
	Game LibraryGameEntry
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNewGame is a free log retrieval operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) FilterNewGame(opts *bind.FilterOpts) (*LibraryNewGameIterator, error) {

	logs, sub, err := _Library.contract.FilterLogs(opts, "NewGame")
	if err != nil {
		return nil, err
	}
	return &LibraryNewGameIterator{contract: _Library.contract, event: "NewGame", logs: logs, sub: sub}, nil
}

// WatchNewGame is a free log subscription operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) WatchNewGame(opts *bind.WatchOpts, sink chan<- *LibraryNewGame) (event.Subscription, error) {

	logs, sub, err := _Library.contract.WatchLogs(opts, "NewGame")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibraryNewGame)
				if err := _Library.contract.UnpackLog(event, "NewGame", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewGame is a log parse operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) ParseNewGame(log types.Log) (*LibraryNewGame, error) {
	event := new(LibraryNewGame)
	if err := _Library.contract.UnpackLog(event, "NewGame", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LibraryPurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the Library contract.
type LibraryPurchaseIterator struct {
	Event *LibraryPurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibraryPurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibraryPurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibraryPurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibraryPurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibraryPurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibraryPurchase represents a Purchase event raised by the Library contract.
type LibraryPurchase struct {
	Hash  [32]byte
	Buyer common.Address
	Data  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) FilterPurchase(opts *bind.FilterOpts) (*LibraryPurchaseIterator, error) {

	logs, sub, err := _Library.contract.FilterLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return &LibraryPurchaseIterator{contract: _Library.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *LibraryPurchase) (event.Subscription, error) {

	logs, sub, err := _Library.contract.WatchLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibraryPurchase)
				if err := _Library.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) ParsePurchase(log types.Log) (*LibraryPurchase, error) {
	event := new(LibraryPurchase)
	if err := _Library.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
