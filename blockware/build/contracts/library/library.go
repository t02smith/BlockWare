// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package library

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LibraryGameEntry is an auto generated low-level Go binding around an user-defined struct.
type LibraryGameEntry struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}

// LibraryMetaData contains all meta data concerning the Library contract.
var LibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structLibrary.GameEntry\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"getMostRecentVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_game\",\"type\":\"bytes32\"}],\"name\":\"purchaseGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"developer\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"previousVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextVersion\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uploader\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashTreeIPFSAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetsIPFSAddress\",\"type\":\"string\"}],\"internalType\":\"structLibrary.GameEntry\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"uploadGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612a8f806100206000396000f3fe6080604052600436106100705760003560e01c80636fa8b93f1161004e5780636fa8b93f146100f95780639d1950dd14610136578063dc164c821461015f578063f579f8821461019c57610070565b80632d139a1b146100755780633e093f79146100b257806350e0c46e146100ce575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611a4d565b6101e3565b6040516100a99190611aa8565b60405180910390f35b6100cc60048036038101906100c79190611ac3565b610250565b005b3480156100da57600080fd5b506100e3610550565b6040516100f09190611b09565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b9190611ac3565b61055d565b60405161012d9190611b33565b60405180910390f35b34801561014257600080fd5b5061015d60048036038101906101589190611e7e565b610e19565b005b34801561016b57600080fd5b5061018660048036038101906101819190611ec7565b6115d7565b6040516101939190611b33565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190611ac3565b6115fb565b6040516101da9b9a99989796959493929190611f82565b60405180910390f35b6000600180600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614905092915050565b6000806000838152602001908152602001600020600001805461027290612086565b9050116102b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ab90612103565b60405180910390fd5b60006001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e9061216f565b60405180910390fd5b3460008083815260200190815260200160002060070154146103ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a590612201565b60405180910390fd5b60008060008084815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163460008086815260200190815260200160002060000160405161042091906122c4565b60006040518083038185875af1925050503d806000811461045d576040519150601f19603f3d011682016040523d82523d6000602084013e610462565b606091505b5091509150816104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90612327565b60405180910390fd5b600180600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a8333836040516105439392919061239c565b60405180910390a1505050565b6000600280549050905090565b600080600080848152602001908152602001600020600001805461058090612086565b9050116105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b990612103565b60405180910390fd5b6000806000848152602001908152602001600020604051806101600160405290816000820180546105f290612086565b80601f016020809104026020016040519081016040528092919081815260200182805461061e90612086565b801561066b5780601f106106405761010080835404028352916020019161066b565b820191906000526020600020905b81548152906001019060200180831161064e57829003601f168201915b5050505050815260200160018201805461068490612086565b80601f01602080910402602001604051908101604052809291908181526020018280546106b090612086565b80156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b5050505050815260200160028201805461071690612086565b80601f016020809104026020016040519081016040528092919081815260200182805461074290612086565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b505050505081526020016003820180546107a890612086565b80601f01602080910402602001604051908101604052809291908181526020018280546107d490612086565b80156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820180546108b890612086565b80601f01602080910402602001604051908101604052809291908181526020018280546108e490612086565b80156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b50505050508152602001600a8201805461094a90612086565b80601f016020809104026020016040519081016040528092919081815260200182805461097690612086565b80156109c35780601f10610998576101008083540402835291602001916109c3565b820191906000526020600020905b8154815290600101906020018083116109a657829003601f168201915b505050505081525050905060008060001b90505b808260c0015114610df5576000808360c00151815260200190815260200160002060405180610160016040529081600082018054610a1490612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4090612086565b8015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b50505050508152602001600182018054610aa690612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad290612086565b8015610b1f5780601f10610af457610100808354040283529160200191610b1f565b820191906000526020600020905b815481529060010190602001808311610b0257829003601f168201915b50505050508152602001600282018054610b3890612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6490612086565b8015610bb15780601f10610b8657610100808354040283529160200191610bb1565b820191906000526020600020905b815481529060010190602001808311610b9457829003601f168201915b50505050508152602001600382018054610bca90612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf690612086565b8015610c435780601f10610c1857610100808354040283529160200191610c43565b820191906000526020600020905b815481529060010190602001808311610c2657829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600982018054610cda90612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0690612086565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b50505050508152602001600a82018054610d6c90612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9890612086565b8015610de55780601f10610dba57610100808354040283529160200191610de5565b820191906000526020600020905b815481529060010190602001808311610dc857829003601f168201915b50505050508152505091506109d7565b83826080015103610e0a578092505050610e14565b8160c00151925050505b919050565b60008161012001515111610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e599061244c565b60405180910390fd5b60008161014001515111610eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea2906124de565b60405180910390fd5b6000801b8160a00151146114215760008060008360a0015181526020019081526020016000206000018054610edf90612086565b905011610f21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1890612570565b60405180910390fd5b60008060008360a00151815260200190815260200160002060405180610160016040529081600082018054610f5590612086565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8190612086565b8015610fce5780601f10610fa357610100808354040283529160200191610fce565b820191906000526020600020905b815481529060010190602001808311610fb157829003601f168201915b50505050508152602001600182018054610fe790612086565b80601f016020809104026020016040519081016040528092919081815260200182805461101390612086565b80156110605780601f1061103557610100808354040283529160200191611060565b820191906000526020600020905b81548152906001019060200180831161104357829003601f168201915b5050505050815260200160028201805461107990612086565b80601f01602080910402602001604051908101604052809291908181526020018280546110a590612086565b80156110f25780601f106110c7576101008083540402835291602001916110f2565b820191906000526020600020905b8154815290600101906020018083116110d557829003601f168201915b5050505050815260200160038201805461110b90612086565b80601f016020809104026020016040519081016040528092919081815260200182805461113790612086565b80156111845780601f1061115957610100808354040283529160200191611184565b820191906000526020600020905b81548152906001019060200180831161116757829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201805461121b90612086565b80601f016020809104026020016040519081016040528092919081815260200182805461124790612086565b80156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b50505050508152602001600a820180546112ad90612086565b80601f01602080910402602001604051908101604052809291908181526020018280546112d990612086565b80156113265780601f106112fb57610100808354040283529160200191611326565b820191906000526020600020905b81548152906001019060200180831161130957829003601f168201915b50505050508152505090503373ffffffffffffffffffffffffffffffffffffffff1681610100015173ffffffffffffffffffffffffffffffffffffffff16146113a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139b90612602565b60405180910390fd5b81608001518160c001818152505060018060008460800151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550505b3381610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060008083608001518152602001908152602001600020600082015181600001908161148691906127ce565b50602082015181600101908161149c91906127ce565b5060408201518160020190816114b291906127ce565b5060608201518160030190816114c891906127ce565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061012082015181600901908161154f91906127ce565b5061014082015181600a01908161156691906127ce565b509050506002816080015190806001815401808255809150506001900390600052602060002001600090919091909150557f87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed8160800151826040516115cc929190612a29565b60405180910390a150565b600281815481106115e757600080fd5b906000526020600020016000915090505481565b600060205280600052604060002060009150905080600001805461161e90612086565b80601f016020809104026020016040519081016040528092919081815260200182805461164a90612086565b80156116975780601f1061166c57610100808354040283529160200191611697565b820191906000526020600020905b81548152906001019060200180831161167a57829003601f168201915b5050505050908060010180546116ac90612086565b80601f01602080910402602001604051908101604052809291908181526020018280546116d890612086565b80156117255780601f106116fa57610100808354040283529160200191611725565b820191906000526020600020905b81548152906001019060200180831161170857829003601f168201915b50505050509080600201805461173a90612086565b80601f016020809104026020016040519081016040528092919081815260200182805461176690612086565b80156117b35780601f10611788576101008083540402835291602001916117b3565b820191906000526020600020905b81548152906001019060200180831161179657829003601f168201915b5050505050908060030180546117c890612086565b80601f01602080910402602001604051908101604052809291908181526020018280546117f490612086565b80156118415780601f1061181657610100808354040283529160200191611841565b820191906000526020600020905b81548152906001019060200180831161182457829003601f168201915b5050505050908060040154908060050154908060060154908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600901805461189490612086565b80601f01602080910402602001604051908101604052809291908181526020018280546118c090612086565b801561190d5780601f106118e25761010080835404028352916020019161190d565b820191906000526020600020905b8154815290600101906020018083116118f057829003601f168201915b50505050509080600a01805461192290612086565b80601f016020809104026020016040519081016040528092919081815260200182805461194e90612086565b801561199b5780601f106119705761010080835404028352916020019161199b565b820191906000526020600020905b81548152906001019060200180831161197e57829003601f168201915b505050505090508b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6119cc816119b9565b81146119d757600080fd5b50565b6000813590506119e9816119c3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a1a826119ef565b9050919050565b611a2a81611a0f565b8114611a3557600080fd5b50565b600081359050611a4781611a21565b92915050565b60008060408385031215611a6457611a636119af565b5b6000611a72858286016119da565b9250506020611a8385828601611a38565b9150509250929050565b60008115159050919050565b611aa281611a8d565b82525050565b6000602082019050611abd6000830184611a99565b92915050565b600060208284031215611ad957611ad86119af565b5b6000611ae7848285016119da565b91505092915050565b6000819050919050565b611b0381611af0565b82525050565b6000602082019050611b1e6000830184611afa565b92915050565b611b2d816119b9565b82525050565b6000602082019050611b486000830184611b24565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9c82611b53565b810181811067ffffffffffffffff82111715611bbb57611bba611b64565b5b80604052505050565b6000611bce6119a5565b9050611bda8282611b93565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611c0957611c08611b64565b5b611c1282611b53565b9050602081019050919050565b82818337600083830152505050565b6000611c41611c3c84611bee565b611bc4565b905082815260208101848484011115611c5d57611c5c611be9565b5b611c68848285611c1f565b509392505050565b600082601f830112611c8557611c84611be4565b5b8135611c95848260208601611c2e565b91505092915050565b611ca781611af0565b8114611cb257600080fd5b50565b600081359050611cc481611c9e565b92915050565b60006101608284031215611ce157611ce0611b4e565b5b611cec610160611bc4565b9050600082013567ffffffffffffffff811115611d0c57611d0b611bdf565b5b611d1884828501611c70565b600083015250602082013567ffffffffffffffff811115611d3c57611d3b611bdf565b5b611d4884828501611c70565b602083015250604082013567ffffffffffffffff811115611d6c57611d6b611bdf565b5b611d7884828501611c70565b604083015250606082013567ffffffffffffffff811115611d9c57611d9b611bdf565b5b611da884828501611c70565b6060830152506080611dbc848285016119da565b60808301525060a0611dd0848285016119da565b60a08301525060c0611de4848285016119da565b60c08301525060e0611df884828501611cb5565b60e083015250610100611e0d84828501611a38565b6101008301525061012082013567ffffffffffffffff811115611e3357611e32611bdf565b5b611e3f84828501611c70565b6101208301525061014082013567ffffffffffffffff811115611e6557611e64611bdf565b5b611e7184828501611c70565b6101408301525092915050565b600060208284031215611e9457611e936119af565b5b600082013567ffffffffffffffff811115611eb257611eb16119b4565b5b611ebe84828501611cca565b91505092915050565b600060208284031215611edd57611edc6119af565b5b6000611eeb84828501611cb5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f2e578082015181840152602081019050611f13565b60008484015250505050565b6000611f4582611ef4565b611f4f8185611eff565b9350611f5f818560208601611f10565b611f6881611b53565b840191505092915050565b611f7c81611a0f565b82525050565b6000610160820190508181036000830152611f9d818e611f3a565b90508181036020830152611fb1818d611f3a565b90508181036040830152611fc5818c611f3a565b90508181036060830152611fd9818b611f3a565b9050611fe8608083018a611b24565b611ff560a0830189611b24565b61200260c0830188611b24565b61200f60e0830187611afa565b61201d610100830186611f73565b8181036101208301526120308185611f3a565b90508181036101408301526120458184611f3a565b90509c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061209e57607f821691505b6020821081036120b1576120b0612057565b5b50919050565b7f67616d65206e6f7420666f756e64000000000000000000000000000000000000600082015250565b60006120ed600e83611eff565b91506120f8826120b7565b602082019050919050565b6000602082019050818103600083015261211c816120e0565b9050919050565b7f7573657220616c7265616479206f776e732067616d6500000000000000000000600082015250565b6000612159601683611eff565b915061216482612123565b602082019050919050565b600060208201905081810360008301526121888161214c565b9050919050565b7f756e6578706563746564207072696365203d3e2076616c75652073686f756c6460008201527f20657175616c207468652067616d652773207072696363650000000000000000602082015250565b60006121eb603883611eff565b91506121f68261218f565b604082019050919050565b6000602082019050818103600083015261221a816121de565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461224e81612086565b6122588186612221565b945060018216600081146122735760018114612288576122bb565b60ff19831686528115158202860193506122bb565b6122918561222c565b60005b838110156122b357815481890152600182019150602081019050612294565b838801955050505b50505092915050565b60006122d08284612241565b915081905092915050565b7f4661696c656420746f207472616e736665722045746865720000000000000000600082015250565b6000612311601883611eff565b915061231c826122db565b602082019050919050565b6000602082019050818103600083015261234081612304565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061236e82612347565b6123788185612352565b9350612388818560208601611f10565b61239181611b53565b840191505092915050565b60006060820190506123b16000830186611b24565b6123be6020830185611f73565b81810360408301526123d08184612363565b9050949350505050565b7f6e6f2049504653206164647265737320676976656e20666f722068617368207460008201527f7265656500000000000000000000000000000000000000000000000000000000602082015250565b6000612436602483611eff565b9150612441826123da565b604082019050919050565b6000602082019050818103600083015261246581612429565b9050919050565b7f6e6f2049504653206164647265737320676976656e20666f722074686520617360008201527f7365747320000000000000000000000000000000000000000000000000000000602082015250565b60006124c8602583611eff565b91506124d38261246c565b604082019050919050565b600060208201905081810360008301526124f7816124bb565b9050919050565b7f70726576696f75732076657273696f6e206f662067616d65206e6f7420666f7560008201527f6e64000000000000000000000000000000000000000000000000000000000000602082015250565b600061255a602283611eff565b9150612565826124fe565b604082019050919050565b600060208201905081810360008301526125898161254d565b9050919050565b7f6f6e6c7920746865206f726967696e616c2075706c6f616465722063616e207560008201527f70646174652074686569722067616d6500000000000000000000000000000000602082015250565b60006125ec603083611eff565b91506125f782612590565b604082019050919050565b6000602082019050818103600083015261261b816125df565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026126847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612647565b61268e8683612647565b95508019841693508086168417925050509392505050565b6000819050919050565b60006126cb6126c66126c184611af0565b6126a6565b611af0565b9050919050565b6000819050919050565b6126e5836126b0565b6126f96126f1826126d2565b848454612654565b825550505050565b600090565b61270e612701565b6127198184846126dc565b505050565b5b8181101561273d57612732600082612706565b60018101905061271f565b5050565b601f8211156127825761275381612622565b61275c84612637565b8101602085101561276b578190505b61277f61277785612637565b83018261271e565b50505b505050565b600082821c905092915050565b60006127a560001984600802612787565b1980831691505092915050565b60006127be8383612794565b9150826002028217905092915050565b6127d782611ef4565b67ffffffffffffffff8111156127f0576127ef611b64565b5b6127fa8254612086565b612805828285612741565b600060209050601f8311600181146128385760008415612826578287015190505b61283085826127b2565b865550612898565b601f19841661284686612622565b60005b8281101561286e57848901518255600182019150602085019450602081019050612849565b8683101561288b5784890151612887601f891682612794565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b60006128bc82611ef4565b6128c681856128a0565b93506128d6818560208601611f10565b6128df81611b53565b840191505092915050565b6128f3816119b9565b82525050565b61290281611af0565b82525050565b61291181611a0f565b82525050565b600061016083016000830151848203600086015261293582826128b1565b9150506020830151848203602086015261294f82826128b1565b9150506040830151848203604086015261296982826128b1565b9150506060830151848203606086015261298382826128b1565b915050608083015161299860808601826128ea565b5060a08301516129ab60a08601826128ea565b5060c08301516129be60c08601826128ea565b5060e08301516129d160e08601826128f9565b506101008301516129e6610100860182612908565b50610120830151848203610120860152612a0082826128b1565b915050610140830151848203610140860152612a1c82826128b1565b9150508091505092915050565b6000604082019050612a3e6000830185611b24565b8181036020830152612a508184612917565b9050939250505056fea26469706673582212207b933cf3b9ed18c3e09984d06694550a0b7d5e57ec742672e1d8fa84f4ff799664736f6c63430008120033",
}

// LibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use LibraryMetaData.ABI instead.
var LibraryABI = LibraryMetaData.ABI

// LibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibraryMetaData.Bin instead.
var LibraryBin = LibraryMetaData.Bin

// DeployLibrary deploys a new Ethereum contract, binding an instance of Library to it.
func DeployLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Library, error) {
	parsed, err := LibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Library{LibraryCaller: LibraryCaller{contract: contract}, LibraryTransactor: LibraryTransactor{contract: contract}, LibraryFilterer: LibraryFilterer{contract: contract}}, nil
}

// Library is an auto generated Go binding around an Ethereum contract.
type Library struct {
	LibraryCaller     // Read-only binding to the contract
	LibraryTransactor // Write-only binding to the contract
	LibraryFilterer   // Log filterer for contract events
}

// LibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibrarySession struct {
	Contract     *Library          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibraryCallerSession struct {
	Contract *LibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// LibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibraryTransactorSession struct {
	Contract     *LibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibraryRaw struct {
	Contract *Library // Generic contract binding to access the raw methods on
}

// LibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibraryCallerRaw struct {
	Contract *LibraryCaller // Generic read-only contract binding to access the raw methods on
}

// LibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibraryTransactorRaw struct {
	Contract *LibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibrary creates a new instance of Library, bound to a specific deployed contract.
func NewLibrary(address common.Address, backend bind.ContractBackend) (*Library, error) {
	contract, err := bindLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Library{LibraryCaller: LibraryCaller{contract: contract}, LibraryTransactor: LibraryTransactor{contract: contract}, LibraryFilterer: LibraryFilterer{contract: contract}}, nil
}

// NewLibraryCaller creates a new read-only instance of Library, bound to a specific deployed contract.
func NewLibraryCaller(address common.Address, caller bind.ContractCaller) (*LibraryCaller, error) {
	contract, err := bindLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibraryCaller{contract: contract}, nil
}

// NewLibraryTransactor creates a new write-only instance of Library, bound to a specific deployed contract.
func NewLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*LibraryTransactor, error) {
	contract, err := bindLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibraryTransactor{contract: contract}, nil
}

// NewLibraryFilterer creates a new log filterer instance of Library, bound to a specific deployed contract.
func NewLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*LibraryFilterer, error) {
	contract, err := bindLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibraryFilterer{contract: contract}, nil
}

// bindLibrary binds a generic wrapper to an already deployed contract.
func bindLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Library *LibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Library.Contract.LibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Library *LibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Library.Contract.LibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Library *LibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Library.Contract.LibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Library *LibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Library.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Library *LibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Library.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Library *LibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Library.Contract.contract.Transact(opts, method, params...)
}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibraryCaller) GameHashes(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "gameHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibrarySession) GameHashes(arg0 *big.Int) ([32]byte, error) {
	return _Library.Contract.GameHashes(&_Library.CallOpts, arg0)
}

// GameHashes is a free data retrieval call binding the contract method 0xdc164c82.
//
// Solidity: function gameHashes(uint256 ) view returns(bytes32)
func (_Library *LibraryCallerSession) GameHashes(arg0 *big.Int) ([32]byte, error) {
	return _Library.Contract.GameHashes(&_Library.CallOpts, arg0)
}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibraryCaller) Games(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "games", arg0)

	outstruct := new(struct {
		Title               string
		Version             string
		ReleaseDate         string
		Developer           string
		RootHash            [32]byte
		PreviousVersion     [32]byte
		NextVersion         [32]byte
		Price               *big.Int
		Uploader            common.Address
		HashTreeIPFSAddress string
		AssetsIPFSAddress   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.ReleaseDate = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Developer = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.RootHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.PreviousVersion = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.NextVersion = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)
	outstruct.Price = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.Uploader = *abi.ConvertType(out[8], new(common.Address)).(*common.Address)
	outstruct.HashTreeIPFSAddress = *abi.ConvertType(out[9], new(string)).(*string)
	outstruct.AssetsIPFSAddress = *abi.ConvertType(out[10], new(string)).(*string)

	return *outstruct, err

}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibrarySession) Games(arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	return _Library.Contract.Games(&_Library.CallOpts, arg0)
}

// Games is a free data retrieval call binding the contract method 0xf579f882.
//
// Solidity: function games(bytes32 ) view returns(string title, string version, string releaseDate, string developer, bytes32 rootHash, bytes32 previousVersion, bytes32 nextVersion, uint256 price, address uploader, string hashTreeIPFSAddress, string assetsIPFSAddress)
func (_Library *LibraryCallerSession) Games(arg0 [32]byte) (struct {
	Title               string
	Version             string
	ReleaseDate         string
	Developer           string
	RootHash            [32]byte
	PreviousVersion     [32]byte
	NextVersion         [32]byte
	Price               *big.Int
	Uploader            common.Address
	HashTreeIPFSAddress string
	AssetsIPFSAddress   string
}, error) {
	return _Library.Contract.Games(&_Library.CallOpts, arg0)
}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibraryCaller) GetMostRecentVersion(opts *bind.CallOpts, _game [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "getMostRecentVersion", _game)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibrarySession) GetMostRecentVersion(_game [32]byte) ([32]byte, error) {
	return _Library.Contract.GetMostRecentVersion(&_Library.CallOpts, _game)
}

// GetMostRecentVersion is a free data retrieval call binding the contract method 0x6fa8b93f.
//
// Solidity: function getMostRecentVersion(bytes32 _game) view returns(bytes32)
func (_Library *LibraryCallerSession) GetMostRecentVersion(_game [32]byte) ([32]byte, error) {
	return _Library.Contract.GetMostRecentVersion(&_Library.CallOpts, _game)
}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibraryCaller) HasPurchased(opts *bind.CallOpts, _game [32]byte, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "hasPurchased", _game, _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibrarySession) HasPurchased(_game [32]byte, _addr common.Address) (bool, error) {
	return _Library.Contract.HasPurchased(&_Library.CallOpts, _game, _addr)
}

// HasPurchased is a free data retrieval call binding the contract method 0x2d139a1b.
//
// Solidity: function hasPurchased(bytes32 _game, address _addr) view returns(bool)
func (_Library *LibraryCallerSession) HasPurchased(_game [32]byte, _addr common.Address) (bool, error) {
	return _Library.Contract.HasPurchased(&_Library.CallOpts, _game, _addr)
}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibraryCaller) LibSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Library.contract.Call(opts, &out, "libSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibrarySession) LibSize() (*big.Int, error) {
	return _Library.Contract.LibSize(&_Library.CallOpts)
}

// LibSize is a free data retrieval call binding the contract method 0x50e0c46e.
//
// Solidity: function libSize() view returns(uint256)
func (_Library *LibraryCallerSession) LibSize() (*big.Int, error) {
	return _Library.Contract.LibSize(&_Library.CallOpts)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibraryTransactor) PurchaseGame(opts *bind.TransactOpts, _game [32]byte) (*types.Transaction, error) {
	return _Library.contract.Transact(opts, "purchaseGame", _game)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibrarySession) PurchaseGame(_game [32]byte) (*types.Transaction, error) {
	return _Library.Contract.PurchaseGame(&_Library.TransactOpts, _game)
}

// PurchaseGame is a paid mutator transaction binding the contract method 0x3e093f79.
//
// Solidity: function purchaseGame(bytes32 _game) payable returns()
func (_Library *LibraryTransactorSession) PurchaseGame(_game [32]byte) (*types.Transaction, error) {
	return _Library.Contract.PurchaseGame(&_Library.TransactOpts, _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibraryTransactor) UploadGame(opts *bind.TransactOpts, _game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.contract.Transact(opts, "uploadGame", _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibrarySession) UploadGame(_game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.Contract.UploadGame(&_Library.TransactOpts, _game)
}

// UploadGame is a paid mutator transaction binding the contract method 0x9d1950dd.
//
// Solidity: function uploadGame((string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) _game) returns()
func (_Library *LibraryTransactorSession) UploadGame(_game LibraryGameEntry) (*types.Transaction, error) {
	return _Library.Contract.UploadGame(&_Library.TransactOpts, _game)
}

// LibraryNewGameIterator is returned from FilterNewGame and is used to iterate over the raw logs and unpacked data for NewGame events raised by the Library contract.
type LibraryNewGameIterator struct {
	Event *LibraryNewGame // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibraryNewGameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibraryNewGame)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibraryNewGame)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibraryNewGameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibraryNewGameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibraryNewGame represents a NewGame event raised by the Library contract.
type LibraryNewGame struct {
	Hash [32]byte
	Game LibraryGameEntry
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNewGame is a free log retrieval operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) FilterNewGame(opts *bind.FilterOpts) (*LibraryNewGameIterator, error) {

	logs, sub, err := _Library.contract.FilterLogs(opts, "NewGame")
	if err != nil {
		return nil, err
	}
	return &LibraryNewGameIterator{contract: _Library.contract, event: "NewGame", logs: logs, sub: sub}, nil
}

// WatchNewGame is a free log subscription operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) WatchNewGame(opts *bind.WatchOpts, sink chan<- *LibraryNewGame) (event.Subscription, error) {

	logs, sub, err := _Library.contract.WatchLogs(opts, "NewGame")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibraryNewGame)
				if err := _Library.contract.UnpackLog(event, "NewGame", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewGame is a log parse operation binding the contract event 0x87eda7d7b517be7d99c808b4c04c403f56581ebf6d35b6cbd27a8a69a8f148ed.
//
// Solidity: event NewGame(bytes32 hash, (string,string,string,string,bytes32,bytes32,bytes32,uint256,address,string,string) game)
func (_Library *LibraryFilterer) ParseNewGame(log types.Log) (*LibraryNewGame, error) {
	event := new(LibraryNewGame)
	if err := _Library.contract.UnpackLog(event, "NewGame", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LibraryPurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the Library contract.
type LibraryPurchaseIterator struct {
	Event *LibraryPurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibraryPurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibraryPurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibraryPurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibraryPurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibraryPurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibraryPurchase represents a Purchase event raised by the Library contract.
type LibraryPurchase struct {
	Hash  [32]byte
	Buyer common.Address
	Data  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) FilterPurchase(opts *bind.FilterOpts) (*LibraryPurchaseIterator, error) {

	logs, sub, err := _Library.contract.FilterLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return &LibraryPurchaseIterator{contract: _Library.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *LibraryPurchase) (event.Subscription, error) {

	logs, sub, err := _Library.contract.WatchLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibraryPurchase)
				if err := _Library.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x4cd43aaf0718852d4b731ab37f54b2e990206041b88e7fffc13205577f96550a.
//
// Solidity: event Purchase(bytes32 hash, address buyer, bytes data)
func (_Library *LibraryFilterer) ParsePurchase(log types.Log) (*LibraryPurchase, error) {
	event := new(LibraryPurchase)
	if err := _Library.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
